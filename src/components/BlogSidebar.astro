---
import { getCollection } from 'astro:content';

interface Props {
  currentSlug?: string;
}

const { currentSlug } = Astro.props;

// Get all blog posts from content collection
const allBlogPosts = await getCollection('blog');

// Sort posts by date (newest first)
const sortedPosts = allBlogPosts.sort((a, b) => 
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

// Group posts by category (using the category field)
const postsByCategory = sortedPosts.reduce((acc, post) => {
  // Use the category field, or 'General' if not specified
  const category = post.data.category || 'General';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(post);
  return acc;
}, {} as Record<string, typeof allBlogPosts>);

// Get all unique categories and sort them
const categories = Object.keys(postsByCategory).sort();

// Get recent posts (last 5)
const recentPosts = sortedPosts.slice(0, 5);
---

<aside class="blog-sidebar w-80 flex-shrink-0 bg-secondary-950/50 backdrop-blur-sm border-r border-secondary-800 h-screen sticky top-0 overflow-y-auto lg:block hidden">
  <div class="p-6">
    <!-- Blog Header -->
    <div class="mb-8">
      <h2 class="text-xl font-bold text-white mb-2">Blog</h2>
      <p class="text-secondary-400 text-sm">Latest posts and updates</p>
    </div>

    <!-- Search -->
    <div class="mb-6 hidden lg:block">
      <div class="relative">
        <input
          type="text"
          id="sidebar-search"
          placeholder="Search posts..."
          class="w-full bg-secondary-900/50 border border-secondary-800 rounded-lg px-3 py-2 pl-9 text-sm text-white placeholder-secondary-400 focus:outline-none focus:border-accent-500 transition-colors"
        />
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="absolute left-3 top-1/2 transform -translate-y-1/2 text-secondary-400">
          <circle cx="11" cy="11" r="8"></circle>
          <path d="m21 21-4.35-4.35"></path>
        </svg>
      </div>
    </div>

    <!-- Recent Posts Section -->
    <div class="mb-8 hidden lg:block">
      <h3 class="text-lg font-semibold text-white mb-4">Recent Posts</h3>
      <div class="space-y-2">
        {recentPosts.map(post => (
          <a 
            href={`/blog/${post.slug}`}
            class={`recent-post-link block p-3 text-sm rounded-lg transition-all duration-200 hover:bg-secondary-800/50 hover:text-accent-400 ${
              currentSlug === post.slug 
                ? 'bg-accent-500/20 text-accent-400 border-l-2 border-accent-500' 
                : 'text-secondary-300'
            }`}
            data-post-title={post.data.title.toLowerCase()}
            data-post-tags={post.data.tags.join(' ').toLowerCase()}
            data-post-description={post.data.description.toLowerCase()}
          >
            <div class="font-medium truncate">{post.data.title}</div>
            <div class="text-xs text-secondary-400 mt-1">
              {new Date(post.data.pubDate).toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric',
                year: 'numeric'
              })}
            </div>
          </a>
        ))}
      </div>
    </div>

    <!-- Categories Navigation -->
    <nav class="blog-nav lg:block hidden">
      <h3 class="text-lg font-semibold text-white mb-4">Categories</h3>
      {categories.map(category => {
        const categoryPosts = postsByCategory[category] || [];
        if (categoryPosts.length === 0) return null;
        
        return (
          <div class="category-group mb-4" data-category={category}>
            <button 
              class="category-toggle w-full flex items-center justify-between p-2 text-left hover:bg-secondary-800/50 rounded-lg transition-colors group"
              data-category={category}
            >
              <div class="flex items-center gap-2">
                <span class="font-medium text-white group-hover:text-accent-400 transition-colors">
                  {category}
                </span>
                <span class="text-xs text-secondary-400 ml-1">
                  ({categoryPosts.length})
                </span>
              </div>
              <svg 
                class={`recent-post-link block p-3 text-sm rounded-lg transition-all duration-200 hover:bg-secondary-800/50 hover:text-accent-400 relative ${
                xmlns="http://www.w3.org/2000/svg" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="currentColor" 
                stroke-width="2" 
                stroke-linecap="round" 
                stroke-linejoin="round"
                title={post.data.title}
              >
                <polyline points="6 9 12 15 18 9"></polyline>
              </svg>
            </button>
            
            <div class="category-posts ml-4 mt-2 space-y-1 max-h-0 overflow-hidden transition-all duration-300 ease-in-out">
              {categoryPosts.map(post => (
                <a 
                  href={`/blog/${post.slug}`}
                  class={`post-link block p-2 text-sm rounded-lg transition-all duration-200 hover:bg-secondary-800/50 hover:text-accent-400 relative ${
                    currentSlug === post.slug 
                      ? 'bg-accent-500/20 text-accent-400 border-l-2 border-accent-500' 
                      : 'text-secondary-300'
                  }`}
                  data-post-title={post.data.title.toLowerCase()}
                  data-post-tags={post.data.tags.join(' ').toLowerCase()}
                  data-post-description={post.data.description.toLowerCase()}
                  title={post.data.title}
                >
                  <div class="truncate font-medium">{post.data.title}</div>
                  <div class="text-xs text-secondary-400 mt-1">
                    {new Date(post.data.pubDate).toLocaleDateString('en-US', { 
                      month: 'short', 
                      day: 'numeric'
                    })}
                  </div>
                </a>
              ))}
            </div>
          </div>
        );
      })}
    </nav>

    <!-- No Results Message -->
    <div id="no-sidebar-results" class="hidden text-center py-8 lg:block">
      <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-auto mb-3 text-secondary-600">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
      <p class="text-secondary-400 text-sm">No posts found</p>
    </div>

    <!-- Blog Stats -->
    <div class="mt-8 pt-6 border-t border-secondary-800 hidden lg:block">
      <div class="text-center">
        <div class="text-2xl font-bold text-white">{allBlogPosts.length}</div>
        <div class="text-sm text-secondary-400">Total Posts</div>
      </div>
    </div>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('sidebar-search');
    const categoryGroups = document.querySelectorAll('.category-group');
    const recentPosts = document.querySelectorAll('.recent-post-link');
    const noResultsMessage = document.getElementById('no-sidebar-results');
    const categoryToggles = document.querySelectorAll('.category-toggle');

    // Initialize category states (all expanded by default)
    function initializeCategoryStates() {
      categoryGroups.forEach(group => {
        const categoryPosts = group.querySelector('.category-posts');
        const chevron = group.querySelector('.category-chevron');
        
        if (categoryPosts && chevron) {
          // Collapse all categories by default
          categoryPosts.style.maxHeight = '0px';
          chevron.style.transform = 'rotate(0deg)';
          group.setAttribute('data-expanded', 'false');
        }
      });
    }

    // Toggle category expansion
    function setupCategoryToggles() {
      categoryToggles.forEach(toggle => {
        toggle.addEventListener('click', function() {
          const group = this.closest('.category-group');
          const categoryPosts = group?.querySelector('.category-posts');
          const chevron = group?.querySelector('.category-chevron');
          
          if (!group || !categoryPosts || !chevron) return;
          
          const isExpanded = group.getAttribute('data-expanded') === 'true';
          
          if (isExpanded) {
            // Collapse
            categoryPosts.style.maxHeight = '0px';
            chevron.style.transform = 'rotate(0deg)';
            group.setAttribute('data-expanded', 'false');
          } else {
            // Expand
            categoryPosts.style.maxHeight = categoryPosts.scrollHeight + 'px';
            chevron.style.transform = 'rotate(180deg)';
            group.setAttribute('data-expanded', 'true');
          }
        });
      });
    }

    // Search functionality
    function setupSearch() {
      if (!searchInput) return;

      function performSearch(query) {
        const searchTerm = query.toLowerCase().trim();
        let hasVisibleResults = false;

        if (searchTerm === '') {
          // Show all categories and posts
          categoryGroups.forEach(group => {
            group.style.display = 'block';
            const posts = group.querySelectorAll('.post-link');
            posts.forEach(post => {
              post.style.display = 'block';
            });
            
            // Restore expanded state
            const categoryPosts = group.querySelector('.category-posts');
            const chevron = group.querySelector('.category-chevron');
            if (categoryPosts && chevron) {
              categoryPosts.style.maxHeight = categoryPosts.scrollHeight + 'px';
              chevron.style.transform = 'rotate(180deg)';
              group.setAttribute('data-expanded', 'true');
            }
          });

          // Show all recent posts
          recentPosts.forEach(post => {
            post.style.display = 'block';
          });

          hasVisibleResults = true;
        } else {
          // Filter posts based on search term
          categoryGroups.forEach(group => {
            const posts = group.querySelectorAll('.post-link');
            let categoryHasVisiblePosts = false;

            posts.forEach(post => {
              const title = post.getAttribute('data-post-title') || '';
              const tags = post.getAttribute('data-post-tags') || '';
              const description = post.getAttribute('data-post-description') || '';
              
              const isMatch = title.includes(searchTerm) || 
                             tags.includes(searchTerm) || 
                             description.includes(searchTerm);

              if (isMatch) {
                post.style.display = 'block';
                categoryHasVisiblePosts = true;
                hasVisibleResults = true;
              } else {
                post.style.display = 'none';
              }
            });

            if (categoryHasVisiblePosts) {
              group.style.display = 'block';
              // Expand category to show matching posts
              const categoryPosts = group.querySelector('.category-posts');
              const chevron = group.querySelector('.category-chevron');
              if (categoryPosts && chevron) {
                categoryPosts.style.maxHeight = categoryPosts.scrollHeight + 'px';
                chevron.style.transform = 'rotate(180deg)';
                group.setAttribute('data-expanded', 'true');
              }
            } else {
              group.style.display = 'none';
            }
          });

          // Filter recent posts
          recentPosts.forEach(post => {
            const title = post.getAttribute('data-post-title') || '';
            const tags = post.getAttribute('data-post-tags') || '';
            const description = post.getAttribute('data-post-description') || '';
            
            const isMatch = title.includes(searchTerm) || 
                           tags.includes(searchTerm) || 
                           description.includes(searchTerm);

            if (isMatch) {
              post.style.display = 'block';
              hasVisibleResults = true;
            } else {
              post.style.display = 'none';
            }
          });
        }

        // Show/hide no results message
        if (noResultsMessage) {
          noResultsMessage.style.display = hasVisibleResults ? 'none' : 'block';
        }
      }

      // Debounce search
      let searchTimeout;
      searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          performSearch(this.value);
        }, 200);
      });

      // Clear search on escape
      searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          this.value = '';
          performSearch('');
          this.blur();
        }
      });
    }

    // Initialize everything
    initializeCategoryStates();
    setupCategoryToggles();
    setupSearch();
  });
</script>

<style>
  .blog-sidebar {
    /* Custom scrollbar */
    scrollbar-width: thin;
    scrollbar-color: theme('colors.secondary.700') theme('colors.secondary.900');
  }

  .blog-sidebar::-webkit-scrollbar {
    width: 6px;
  }

  .blog-sidebar::-webkit-scrollbar-track {
    background: theme('colors.secondary.900');
  }

  .blog-sidebar::-webkit-scrollbar-thumb {
    background: theme('colors.secondary.700');
    border-radius: 3px;
  }

  .blog-sidebar::-webkit-scrollbar-thumb:hover {
    background: theme('colors.secondary.600');
  }

  /* Smooth transitions for category expansion */
  .category-posts {
    transition: max-height 0.3s ease-in-out;
  }

  /* Hover effects */
  .category-toggle:hover .category-chevron {
    color: theme('colors.accent.400');
  }

  /* Focus styles */
  #sidebar-search:focus {
    box-shadow: 0 0 0 2px rgba(0, 144, 255, 0.2);
  }

  .category-toggle:focus {
    outline: 2px solid theme('colors.accent.500');
    outline-offset: 2px;
  }

  .post-link:focus,
  .recent-post-link:focus {
    outline: 2px solid theme('colors.accent.500');
    outline-offset: 2px;
  }

  /* Enhanced tooltip styles */
  .recent-post-link[title]:hover::after,
  .post-link[title]:hover::after {
    content: attr(title);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: theme('colors.secondary.950');
    color: theme('colors.white');
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    white-space: nowrap;
    z-index: 1000;
    border: 1px solid theme('colors.secondary.700');
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    pointer-events: none;
    max-width: 200px;
    white-space: normal;
    text-align: center;
    line-height: 1.3;
  }

  .recent-post-link[title]:hover::before,
  .post-link[title]:hover::before {
    content: '';
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(1px);
    width: 0;
    height: 0;
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    border-top: 4px solid theme('colors.secondary.700');
    z-index: 1001;
    pointer-events: none;
  }
</style>
</aside>