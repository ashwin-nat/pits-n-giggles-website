---
import { Image } from 'astro:assets';

const navLinks = [
  { text: 'Home', href: '/' },
  { text: 'About', href: '/about' },
  { text: 'Features', href: '/features' },
  { text: 'Screenshots', href: '/screenshots' },
  { text: 'Wiki', href: '/wiki' },
  { text: 'Releases', href: '/releases' },
  { text: 'Blog', href: '/blog' },
];
---

<header class="fixed w-full top-0 z-50 transition-all duration-300 bg-secondary-950/95 backdrop-blur-sm border-b border-secondary-800 py-1" id="navbar">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between">
      <a href="/" class="flex items-center gap-2">
        <div class="relative w-10 h-10 flex items-center justify-center overflow-hidden">
          <Image
            src="/logo.png"
            alt="App Icon"
            width={32}
            height={32}
            class="w-8 h-8"
          />
        </div>
        <span class="font-extrabold text-white text-xl">Pits n' Giggles</span>
      </a>

      <!-- Mobile menu button -->
      <button id="mobile-menu-button" class="lg:hidden flex items-center" aria-label="Toggle menu">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center gap-8">
        {navLinks.map(link => (
          <a
            href={link.href}
            class="text-white hover:text-accent-400 before:absolute before:w-0 before:h-0.5 before:bg-accent-500 before:bottom-[-4px] before:left-0 hover:before:w-full before:transition-all relative"
          >
            {link.text}
          </a>
        ))}
        <a 
          href="/releases" 
          class="bg-primary-500 hover:bg-primary-600 text-white px-6 py-2 rounded-md transition-colors duration-200 font-semibold flex items-center gap-2"
        >
          Download
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7 10 12 15 17 10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
        </a>
      </nav>

      <!-- Mobile Navigation -->
      <nav id="mobile-menu" class="fixed left-0 right-0 top-[57px] hidden lg:hidden">
        <div class="bg-secondary-950 shadow-lg border border-secondary-800 rounded-b-lg mx-4 transform origin-top transition-all duration-200 opacity-0 scale-95">
          <div class="p-4 flex flex-col gap-4">
            {navLinks.map(link => (
              <a
                href={link.href}
                class="text-lg text-white hover:text-accent-400 transition-colors"
              >
                {link.text}
              </a>
            ))}
            <a 
              href="/releases" 
              class="bg-primary-500 hover:bg-primary-600 text-white px-6 py-2 rounded-md transition-colors duration-200 font-semibold flex items-center justify-center gap-2 mt-2"
            >
              Download
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="7 10 12 15 17 10"></polyline>
                <line x1="12" y1="15" x2="12" y2="3"></line>
              </svg>
            </a>
          </div>
        </div>
      </nav>
    </div>
  </div>
</header>

<script>
  const navbar = document.getElementById('navbar');
  const mobileMenuBtn = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuContent = mobileMenu?.querySelector('div');

  // Mobile menu toggle
  mobileMenuBtn?.addEventListener('click', (e) => {
    e.stopPropagation();
    const isHidden = mobileMenu?.classList.contains('hidden');
    
    if (isHidden) {
      mobileMenu?.classList.remove('hidden');
      // Small delay to ensure the display: block has taken effect
      requestAnimationFrame(() => {
        menuContent?.classList.remove('opacity-0', 'scale-95');
        menuContent?.classList.add('opacity-100', 'scale-100');
      });
    } else {
      menuContent?.classList.add('opacity-0', 'scale-95');
      menuContent?.classList.remove('opacity-100', 'scale-100');
      // Wait for animation to complete before hiding
      setTimeout(() => {
        mobileMenu?.classList.add('hidden');
      }, 200);
    }
  });

  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    const target = e.target as Node;
    if (mobileMenu && !mobileMenu.contains(target) && !mobileMenuBtn?.contains(target)) {
      menuContent?.classList.add('opacity-0', 'scale-95');
      menuContent?.classList.remove('opacity-100', 'scale-100');
      setTimeout(() => {
        mobileMenu.classList.add('hidden');
      }, 200);
    }
  });

  // Close mobile menu when clicking on a link
  const mobileLinks = mobileMenu?.querySelectorAll('a');
  mobileLinks?.forEach(link => {
    link.addEventListener('click', () => {
      menuContent?.classList.add('opacity-0', 'scale-95');
      menuContent?.classList.remove('opacity-100', 'scale-100');
      setTimeout(() => {
        mobileMenu?.classList.add('hidden');
      }, 200);
    });
  });
</script>