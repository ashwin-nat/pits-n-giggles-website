---
import Layout from '../layouts/Layout.astro';
import { marked } from 'marked';
import Button from '../components/Button.astro';
import ImageViewer from '../components/ImageViewer.astro';
import { Image } from 'astro:assets';

// Define types for GitHub Release data
interface GitHubAsset {
  name: string;
  browser_download_url: string;
  download_count: number;
}

interface GitHubRelease {
  name: string;
  tag_name: string;
  published_at: string;
  html_url: string;
  body?: string;
  assets?: GitHubAsset[];
}

// Fetch GitHub releases from the actual repository
const GITHUB_API = "https://api.github.com/repos/ashwin-nat/pits-n-giggles/releases";
const numberOfReleases = 5;

// Function to fetch GitHub releases
async function getGitHubReleases(): Promise<GitHubRelease[]> {
  try {
    const response = await fetch(GITHUB_API, {
      headers: {
        'Accept': 'application/vnd.github.v3+json',
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch releases: ${response.status} ${response.statusText}`);
    }

    const allReleases = await response.json();
    return allReleases.slice(0, numberOfReleases);
  } catch (error) {
    console.error('Error fetching GitHub releases:', error);
    return [];
  }
}

// Function to determine platform from filename
function getPlatformInfo(filename: string) {
  const lowerName = filename.toLowerCase();
  
  if (lowerName.includes('.exe') || lowerName.includes('windows') || lowerName.includes('win')) {
    return {
      platform: 'Windows',
      icon: 'bi-windows',
      color: 'text-blue-400'
    };
  } else if (lowerName.includes('.dmg') || lowerName.includes('mac') || lowerName.includes('darwin')) {
    return {
      platform: 'macOS',
      icon: 'bi-apple',
      color: 'text-gray-300'
    };
  } else if (lowerName.includes('.appimage') || lowerName.includes('linux') || lowerName.includes('.deb') || lowerName.includes('.rpm')) {
    return {
      platform: 'Linux',
      icon: 'bi-ubuntu',
      color: 'text-orange-400'
    };
  } else {
    return {
      platform: 'Unknown',
      icon: 'bi-download',
      color: 'text-secondary-400'
    };
  }
}

// Function to extract images from markdown content
function extractImagesFromMarkdown(content: string | undefined): Array<{url: string, alt: string, description?: string}> {
  if (!content) return [];
  
  const images: Array<{url: string, alt: string, description?: string}> = [];
  
  // Match markdown images: ![alt](url) or ![alt](url "title")
  const imageRegex = /!\[([^\]]*)\]\(([^)]+?)(?:\s+"([^"]*)")?\)/g;
  let match;
  
  while ((match = imageRegex.exec(content)) !== null) {
    const [, alt, url, title] = match;
    images.push({
      url: url.trim(),
      alt: alt || 'Release Image',
      description: title || alt || 'Release Image'
    });
  }
  
  return images;
}

// Function to parse markdown content and remove images (we'll display them separately)
function parseMarkdownWithoutImages(content: string | undefined): string {
  try {
    if (!content) return '';
    
    let processedContent = content;
    
    // Remove all image references
    const imageRegex = /!\[([^\]]*)\]\(([^)]+?)(?:\s+"([^"]*)")?\)/g;
    processedContent = processedContent.replace(imageRegex, '');
    
    // Remove empty lines that might be left after removing images
    processedContent = processedContent.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    return marked.parse(processedContent) as string;
  } catch (error) {
    console.error('Error parsing markdown:', error);
    return content || '';
  }
}

// Get the releases data
const releases: GitHubRelease[] = await getGitHubReleases();
const latestRelease = releases[0];
const latestAsset = latestRelease?.assets?.find(a => a.browser_download_url.includes("pits_n_giggles"));

// Extract all images from all releases for the ImageViewer
const allReleaseImages: Array<{url: string, alt: string, description?: string}> = [];
const releaseImageMap: Map<number, Array<{url: string, alt: string, description?: string}>> = new Map();

releases.forEach((release, releaseIndex) => {
  const images = extractImagesFromMarkdown(release.body);
  releaseImageMap.set(releaseIndex, images);
  allReleaseImages.push(...images);
});
---

<Layout
  title="Releases | Pits n' Giggles"
  description="Latest releases and updates for Pits n' Giggles sim racing telemetry application."
>
  <section class="pt-32 pb-12">
    <div class="container mx-auto px-4">
      <div class="text-center max-w-3xl mx-auto mb-16">
        <h1 class="text-4xl font-bold mb-4">Releases</h1>
        <div class="w-20 h-1 bg-primary-500 mx-auto mb-6"></div>
        <p class="text-secondary-300 font-body mb-8">
          Stay up to date with the latest versions and improvements to Pits n' Giggles. Each release brings new features, bug fixes, and performance enhancements.
        </p>
        
        {latestAsset && (
          <Button 
            href={latestAsset.browser_download_url}
            variant="primary"
            size="lg"
            download
            class="inline-flex items-center gap-2"
          >
            Download Latest Version
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
              <polyline points="7 10 12 15 17 10"></polyline>
              <line x1="12" y1="15" x2="12" y2="3"></line>
            </svg>
          </Button>
        )}
      </div>

      <div class="mb-8 flex justify-between items-center">
        <h2 class="text-2xl font-semibold">Release History</h2>
        <a
          href="https://github.com/ashwin-nat/pits-n-giggles/releases"
          target="_blank"
          rel="noopener noreferrer"
          class="text-accent-500 hover:text-accent-400 font-semibold inline-flex items-center gap-1"
        >
          View on GitHub
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="7" y1="17" x2="17" y2="7"></line>
            <polyline points="7 7 17 7 17 17"></polyline>
          </svg>
        </a>
      </div>

      {releases.length > 0 ? (
        <div class="space-y-8">
          {releases.map((release: GitHubRelease, releaseIndex: number) => {
            const releaseImages = releaseImageMap.get(releaseIndex) || [];
            return (
              <div class="bg-secondary-800 rounded-lg p-6 shadow-lg border border-secondary-700">
                <div class="flex justify-between items-start mb-4">
                  <div>
                    <h3 class="text-xl font-bold text-primary-300">{release.name || release.tag_name}</h3>
                    <p class="text-secondary-400 text-sm">
                      Released on {new Date(release.published_at).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </p>
                  </div>
                  <a
                    href={release.html_url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="text-accent-500 hover:text-accent-400 text-sm font-medium"
                  >
                    {release.tag_name}
                  </a>
                </div>

                {release.body && (
                  <div class="release-notes mb-6">
                    <style is:global>
                      /* Custom styling for GitHub markdown content */
                      .release-notes h1, .release-notes h2, .release-notes h3 {
                        margin-top: 1.5rem;
                        margin-bottom: 0.75rem;
                        font-weight: 600;
                        color: #e2e8f0;
                      }
                      .release-notes h1 {
                        font-size: 1.5rem;
                      }
                      .release-notes h2 {
                        font-size: 1.25rem;
                        padding-bottom: 0.3rem;
                        border-bottom: 1px solid #4a5568;
                      }
                      .release-notes h3 {
                        font-size: 1.125rem;
                      }
                      .release-notes ul, .release-notes ol {
                        margin-top: 0.5rem;
                        margin-bottom: 1rem;
                        padding-left: 1.5rem;
                      }
                      .release-notes ul {
                        list-style-type: disc;
                      }
                      .release-notes ol {
                        list-style-type: decimal;
                      }
                      .release-notes li {
                        margin-bottom: 0.375rem;
                        color: #cbd5e0;
                      }
                      .release-notes p {
                        margin-bottom: 1rem;
                        color: #cbd5e0;
                      }
                      .release-notes a {
                        color: #63b3ed;
                        text-decoration: none;
                      }
                      .release-notes a:hover {
                        text-decoration: underline;
                      }
                      .release-notes code {
                        padding: 0.2em 0.4em;
                        margin: 0;
                        font-size: 85%;
                        background-color: #2d3748;
                        border-radius: 3px;
                        color: #e2e8f0;
                      }
                      .release-notes pre {
                        background-color: #2d3748;
                        padding: 1rem;
                        border-radius: 0.375rem;
                        overflow-x: auto;
                        margin: 1rem 0;
                      }
                      .release-notes pre code {
                        background-color: transparent;
                        padding: 0;
                        border-radius: 0;
                      }
                    </style>
                    <Fragment set:html={parseMarkdownWithoutImages(release.body)} />
                  </div>
                )}

                {/* Display single image with indicator if multiple exist */}
                {releaseImages.length > 0 && (
                  <div class="mb-6">
                    <h4 class="text-lg font-semibold mb-3 text-primary-200">Screenshots</h4>
                    <div class="relative">
                      <div 
                        class="cursor-pointer rounded-lg overflow-hidden border border-secondary-700 hover:border-accent-400 transition-all duration-200 bg-secondary-800/50 hover:shadow-lg relative group" 
                        data-release-screenshot 
                        data-release-index={releaseIndex} 
                        data-image-index="0"
                      >
                        <img 
                          src={releaseImages[0].url} 
                          alt={releaseImages[0].alt} 
                          class="w-full h-auto transition-transform duration-200 group-hover:scale-[1.02]" 
                          loading="lazy"
                        />
                        
                        {/* Overlay with text and image count indicator */}
                        <div class="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center">
                          <div class="text-center text-white">
                            <div class="text-lg font-semibold mb-2">Click to view all images</div>
                            {releaseImages.length > 1 && (
                              <div class="flex items-center justify-center gap-2 text-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                                  <circle cx="8.5" cy="8.5" r="1.5"></circle>
                                  <polyline points="21 15 16 10 5 21"></polyline>
                                </svg>
                                <span>{releaseImages.length} images</span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {release.assets && release.assets.length > 0 && (
                  <div>
                    <h4 class="text-lg font-semibold mb-2 text-primary-200">Downloads</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {release.assets.map(asset => {
                        const platformInfo = getPlatformInfo(asset.name);
                        return (
                          <a
                            href={asset.browser_download_url}
                            class="flex items-center justify-between bg-secondary-700 hover:bg-secondary-600 transition-colors p-3 rounded-md group"
                          >
                            <div class="flex items-center gap-2 min-w-0 flex-1">
                              <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-accent-500 flex-shrink-0">
                                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                  <polyline points="7 10 12 15 17 10"></polyline>
                                  <line x1="12" y1="15" x2="12" y2="3"></line>
                                </svg>
                                <div class={`flex items-center ${platformInfo.color} flex-shrink-0`} title={platformInfo.platform}>
                                  <i class={`${platformInfo.icon} text-lg`}></i>
                                </div>
                              </div>
                              <span class="text-sm truncate">{asset.name}</span>
                            </div>
                            <span class="text-xs text-secondary-400 ml-2 flex-shrink-0">{asset.download_count.toLocaleString()} downloads</span>
                          </a>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      ) : (
        <div class="bg-secondary-800 rounded-lg p-6 text-center">
          <p class="text-secondary-300">
            Unable to load releases. Please check back later or visit our GitHub page.
          </p>
        </div>
      )}

      <!-- GitHub Releases Link Section -->
      <div class="mt-16 text-center bg-secondary-900/50 backdrop-blur-sm border border-secondary-800 rounded-lg p-8">
        <div class="max-w-2xl mx-auto">
          <h3 class="text-2xl font-bold text-white mb-4">Want to see all releases?</h3>
          <p class="text-secondary-300 font-body mb-6">
            Check out our complete release history on GitHub, including older versions, pre-releases, and detailed changelogs.
          </p>
          <a
            href="https://github.com/ashwin-nat/pits-n-giggles/releases"
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center gap-3 bg-secondary-800 hover:bg-secondary-700 text-white px-8 py-4 rounded-lg transition-all duration-200 font-semibold text-lg group"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="group-hover:scale-110 transition-transform duration-200">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
            View All Releases on GitHub
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="group-hover:translate-x-1 transition-transform duration-200">
              <line x1="7" y1="17" x2="17" y2="7"></line>
              <polyline points="7 7 17 7 17 17"></polyline>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Image Viewer Component -->
  {allReleaseImages.length > 0 && (
    <ImageViewer images={allReleaseImages} />
  )}

  <!-- JavaScript for handling image clicks -->
  <script define:vars={{ allReleaseImages, releaseImageMap: Object.fromEntries(releaseImageMap) }}>
    document.addEventListener('DOMContentLoaded', function() {
      // Handle clicks on release images
      document.querySelectorAll('[data-release-screenshot]').forEach(img => {
        img.addEventListener('click', function() {
          const releaseIndex = parseInt(this.getAttribute('data-release-index'));
          const imageIndex = parseInt(this.getAttribute('data-image-index'));
          
          // Calculate the global index for this image
          let globalIndex = 0;
          for (let i = 0; i < releaseIndex; i++) {
            const releaseImages = releaseImageMap[i] || [];
            globalIndex += releaseImages.length;
          }
          globalIndex += imageIndex;
          
          // Trigger the image viewer
          const viewer = document.getElementById('imageViewer');
          if (viewer) {
            // Set the current index and show the viewer
            window.currentIndex = globalIndex;
            
            // Dispatch a custom event to open the viewer
            const event = new CustomEvent('openImageViewer', { 
              detail: { index: globalIndex } 
            });
            document.dispatchEvent(event);
          }
        });
      });
    });
  </script>
</Layout>