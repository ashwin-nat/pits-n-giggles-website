---
import Layout from '../layouts/Layout.astro';
import ImageViewer from '../components/ImageViewer.astro';
import { Image } from 'astro:assets';

import mainUI from '../assets/common/main-ui.png';
import lapTimesModal from '../assets/common/lap-times-modal-ss.png';
import engView from '../assets/common/eng-view.png';
import streamOverlay from '../assets/common/png-stream-overlay.png';
import launcher from '../assets/common/launcher.png';

const features = [
  {
    title: "Real-time Telemetry",
    description: "Get instant feedback on your driving with millisecond precision telemetry data. Monitor every aspect of your car's performance in real-time, from ERS to tire wear.",
    details: [
      "Live data streaming with sub-millisecond latency",
      "Multiple data visualization options",
      "Historical data comparison",
      "Live comparison of key data points against rivals during race"
    ],
    image: {
      url: mainUI,
      alt: "Real-time Telemetry Dashboard"
    }
  },
  {
    title: "Advanced Analytics",
    description: "Dive deep into your racing performance with comprehensive analytics tools. Compare your driving style across different sessions and identify areas for improvement.",
    details: [
      "Detailed lap time analysis",
      "Sector-by-sector comparison",
      "ERS, fuel, tyre wear per lap"
    ],
    image: {
      url: lapTimesModal,
      alt: "Advanced Analytics Dashboard"
    }
  },
  {
    title: "Engineer mode",
    description: "For dedicated rage engineers, use the advanced engineer view to get extensive live data to compare your driver against the competition",
    details: [
      "Tire wear prediction",
      "Fuel consumption analysis",
      "Optimal pit stop timing",
      "Weather impact assessment"
    ],
    image: {
      url: engView,
      alt: "Race Strategy Interface"
    }
  },
  {
    title: "OBS Integration",
    description: "Add live real-time data points to your stream/recording for content creation",
    details: [
      "Recent Lap Times",
      "Weather forecast",
      "Pace comparison against car in front and car behind",
      "(Add http://localhost:4768/player-stream-overlay as a browser source)"
    ],
    image: {
      url: streamOverlay,
      alt: "OBS Integration Example"
    }
  },
  {
    title: "Save data viewer",
    description: "Pits n' Giggles saves all qualifying, race and sprint sessions data to a file organized by date and timestamp. Open this .json file in the app to view the data.",
    details: [
      "Simple to use, same dashboard as live mode",
      "Easy to share save files",
      "Standard JSON format, easy to parse for advanced users",
    ],
    image: {
      url: launcher,
      alt: "Save Data Viewer"
    }
  }
];
---

<Layout title="Features">
  <div class="pt-32 pb-20">
    <div class="container mx-auto px-4">
      <div class="text-center max-w-3xl mx-auto mb-16">
        <h1 class="text-4xl font-bold mb-4">Features</h1>
        <p class="text-secondary-300">
          Discover how Pits n' Giggles can transform your sim racing experience with powerful tools and insights.
        </p>
      </div>

      <!-- Detailed Features -->
      <div class="space-y-20">
        {features.map((feature, index) => (
          <div class={`flex flex-col lg:flex-row gap-12 items-center ${index % 2 === 1 ? 'lg:flex-row-reverse' : ''}`}>
            {/* Mobile Layout */}
            <div class="flex-1 lg:hidden">
              <h2 class="text-3xl font-bold text-white mb-4">{feature.title}</h2>
              <div class="bg-secondary-900/50 backdrop-blur-sm border border-secondary-800 rounded-lg p-4 cursor-pointer transition-all duration-300 hover:border-secondary-700 mb-4" data-screenshot>
                <Image
                  src={feature.image.url}
                  alt={feature.image.alt}
                  format="webp"
                  quality={80}
                  class="rounded-lg w-full h-auto"
                />
              </div>
              <p class="text-lg text-secondary-300 mb-4">{feature.description}</p>
              <ul class="space-y-2">
                {feature.details.map(detail => (
                  <li class="flex items-center gap-2 text-secondary-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="20 6 9 17 4 12"></polyline>
                    </svg>
                    {detail}
                  </li>
                ))}
              </ul>
            </div>

            {/* Desktop Layout */}
            <div class="hidden lg:flex flex-1 space-y-4 flex-col">
              <h2 class="text-3xl font-bold text-white">{feature.title}</h2>
              <p class="text-lg text-secondary-300">{feature.description}</p>
              <ul class="space-y-2">
                {feature.details.map(detail => (
                  <li class="flex items-center gap-2 text-secondary-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="20 6 9 17 4 12"></polyline>
                    </svg>
                    {detail}
                  </li>
                ))}
              </ul>
            </div>
            <div class="hidden lg:flex flex-1 bg-secondary-900/50 backdrop-blur-sm border border-secondary-800 rounded-lg p-4 cursor-pointer transition-all duration-300 hover:border-secondary-700" data-screenshot>
              <Image
                src={feature.image.url}
                alt={feature.image.alt}
                format="webp"
                quality={80}
                class="rounded-lg w-full h-auto"
              />
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <ImageViewer images={features.map(f => ({ url: f.image.url.src, alt: f.image.alt, description: f.description }))} />
</Layout>