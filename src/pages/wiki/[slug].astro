---
import { getCollection } from 'astro:content';
import WikiLayout from '../../layouts/WikiLayout.astro';
import dayjs from 'dayjs';

// Generate static paths for all wiki pages
export async function getStaticPaths() {
  const wikiEntries = await getCollection('wiki');
  return wikiEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the wiki page data
const { entry } = Astro.props;
const { Content, headings } = await entry.render();

// Format the date
const formattedDate = dayjs(entry.data.lastUpdated).format('MMMM D, YYYY');

// Filter headings for table of contents (only h2 and h3)
const tocHeadings = headings.filter(heading => heading.depth >= 2 && heading.depth <= 3);

// Get related pages (same category, excluding current page)
const allWikiPages = await getCollection('wiki');
const relatedPages = allWikiPages
  .filter(p => p.data.category === entry.data.category && p.slug !== entry.slug)
  .slice(0, 3);

// Get next/previous pages (by category order)
const categoryPages = allWikiPages.filter(p => p.data.category === entry.data.category);
const currentIndex = categoryPages.findIndex(p => p.slug === entry.slug);
const previousPage = currentIndex > 0 ? categoryPages[currentIndex - 1] : null;
const nextPage = currentIndex < categoryPages.length - 1 ? categoryPages[currentIndex + 1] : null;

const difficultyColors = {
  beginner: 'bg-green-500/20 text-green-400 border-green-500/30',
  intermediate: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',
  advanced: 'bg-red-500/20 text-red-400 border-red-500/30'
};

const difficultyColor = entry.data.difficulty ? difficultyColors[entry.data.difficulty] : '';

// Prepare metadata for social sharing
const postUrl = `${Astro.site}wiki/${entry.slug}`;
---

<WikiLayout 
  title={entry.data.title} 
  description={entry.data.description}
  currentSlug={entry.slug}
>
  <div class="flex">
    <!-- Main Content -->
    <article class="flex-1 p-8">
      <div class="max-w-4xl">
        <!-- Breadcrumb -->
        <nav class="mb-8">
          <ol class="flex items-center space-x-2 text-sm text-secondary-400">
            <li>
              <a href="/wiki" class="hover:text-accent-400 transition-colors">Wiki</a>
            </li>
            <li>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </li>
            <li>
              <span class="hover:text-accent-400 transition-colors">
                {entry.data.category}
              </span>
            </li>
            <li>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </li>
            <li class="text-white">{entry.data.title}</li>
          </ol>
        </nav>

        <!-- Page Header -->
        <header class="mb-12">
          <div class="flex flex-wrap items-center gap-3 mb-4">
            <span class="inline-flex items-center gap-2 text-sm px-3 py-1 bg-secondary-800 text-secondary-300 rounded">
              {entry.data.category}
            </span>
            {entry.data.difficulty && (
              <span class={`text-sm px-3 py-1 rounded border ${difficultyColor}`}>
                {entry.data.difficulty}
              </span>
            )}
            {entry.data.featured && (
              <span class="bg-accent-500 text-white text-sm px-3 py-1 rounded font-medium">
                Featured
              </span>
            )}
          </div>
          
          <h1 class="text-4xl font-bold mb-4">{entry.data.title}</h1>
          <p class="text-xl text-secondary-300 mb-6">{entry.data.description}</p>
          
          <div class="flex flex-wrap items-center gap-4 text-secondary-400 text-sm">
            <span>Last updated {formattedDate}</span>
            {entry.data.tags.length > 0 && (
              <div class="flex items-center gap-2">
                <span>Tags:</span>
                <div class="flex flex-wrap gap-2">
                  {entry.data.tags.map((tag: string) => (
                    <span class="px-2 py-1 bg-secondary-800/50 text-secondary-400 rounded text-xs">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        </header>

        <!-- Main Content -->
        <div class="prose prose-invert prose-lg max-w-none">
          <Content />
        </div>

        <!-- Page Navigation -->
        <div class="mt-16 pt-8 border-t border-secondary-800">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            {previousPage && (
              <a href={`/wiki/${previousPage.slug}`} class="group flex items-center gap-3 p-4 bg-secondary-900/50 border border-secondary-800 rounded-lg hover:border-secondary-700 transition-all duration-200 no-underline">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-accent-500 group-hover:-translate-x-1 transition-transform">
                  <polyline points="15 18 9 12 15 6"></polyline>
                </svg>
                <div>
                  <div class="text-secondary-400 text-sm">Previous</div>
                  <div class="text-white font-medium group-hover:text-accent-400 transition-colors">{previousPage.data.title}</div>
                </div>
              </a>
            )}
            
            {nextPage && (
              <a href={`/wiki/${nextPage.slug}`} class="group flex items-center gap-3 p-4 bg-secondary-900/50 border border-secondary-800 rounded-lg hover:border-secondary-700 transition-all duration-200 no-underline md:ml-auto">
                <div class="text-right">
                  <div class="text-secondary-400 text-sm">Next</div>
                  <div class="text-white font-medium group-hover:text-accent-400 transition-colors">{nextPage.data.title}</div>
                </div>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-accent-500 group-hover:translate-x-1 transition-transform">
                  <polyline points="9 18 15 12 9 6"></polyline>
                </svg>
              </a>
            )}
          </div>

          <!-- Back to Wiki -->
          <div class="text-center">
            <a href="/wiki" class="inline-flex items-center gap-2 text-accent-500 hover:text-accent-400 font-semibold transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M19 12H5"></path>
                <path d="M12 19l-7-7 7-7"></path>
              </svg>
              Back to Wiki
            </a>
          </div>
        </div>

        <!-- Related Pages -->
        {relatedPages.length > 0 && (
          <aside class="mt-16 pt-8 border-t border-secondary-800">
            <h2 class="text-2xl font-bold mb-6">Related Pages</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
              {relatedPages.map(relatedPage => (
                <a href={`/wiki/${relatedPage.slug}`} class="block p-4 bg-secondary-900/50 border border-secondary-800 rounded-lg hover:border-secondary-700 transition-all duration-200 no-underline group">
                  <h3 class="font-semibold text-white mb-2 group-hover:text-accent-400 transition-colors">
                    {relatedPage.data.title}
                  </h3>
                  <p class="text-secondary-300 text-sm line-clamp-2">
                    {relatedPage.data.description}
                  </p>
                </a>
              ))}
            </div>
          </aside>
        )}
      </div>
    </article>

    <!-- Table of Contents - Right Side -->
    {tocHeadings.length > 0 && (
      <aside class="w-64 flex-shrink-0 p-6">
        <div class="sticky top-24">
          <div class="bg-secondary-900/50 backdrop-blur-sm border border-secondary-800 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 6h18"></path>
                <path d="M3 12h18"></path>
                <path d="M3 18h18"></path>
              </svg>
              Table of Contents
            </h3>
            <nav class="toc-nav">
              <ul class="space-y-2">
                {tocHeadings.map((heading) => (
                  <li class={`toc-item toc-depth-${heading.depth}`}>
                    <a
                      href={`#${heading.slug}`}
                      class="toc-link block text-secondary-300 hover:text-accent-400 transition-colors duration-200 text-sm leading-relaxed"
                    >
                      {heading.text}
                    </a>
                  </li>
                ))}
              </ul>
            </nav>
          </div>
        </div>
      </aside>
    )}
  </div>

  <!-- Table of Contents JavaScript -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Smooth scrolling for TOC links
      const tocLinks = document.querySelectorAll('.toc-nav a[href^="#"]');
      
      tocLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const targetId = this.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            const headerOffset = 120; // Account for fixed header
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
          }
        });
      });

      // Highlight current section in TOC
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const id = entry.target.getAttribute('id');
          const tocLink = document.querySelector(`.toc-link[href="#${id}"]`);

          if (entry.isIntersecting) {
            // Remove active class from all TOC links
            document.querySelectorAll('.toc-link').forEach(link => {
              link.classList.remove('toc-active');
            });

            // Add active class to current section
            if (tocLink) {
              tocLink.classList.add('toc-active');
            }
          }
        });
      }, {
        rootMargin: '-120px 0px -80% 0px' // Trigger when heading is near top of viewport
      });

      // Observe all headings
      document.querySelectorAll('h2[id], h3[id]').forEach(heading => {
        observer.observe(heading);
      });
    });
  </script>
</WikiLayout>

<style>
  .prose {
    --tw-prose-body: theme('colors.secondary.300');
    --tw-prose-headings: theme('colors.white');
    --tw-prose-lead: theme('colors.secondary.300');
    --tw-prose-links: theme('colors.accent.500');
    --tw-prose-bold: theme('colors.white');
    --tw-prose-counters: theme('colors.secondary.400');
    --tw-prose-bullets: theme('colors.secondary.400');
    --tw-prose-hr: theme('colors.secondary.800');
    --tw-prose-quotes: theme('colors.secondary.200');
    --tw-prose-quote-borders: theme('colors.primary.500');
    --tw-prose-captions: theme('colors.secondary.400');
    --tw-prose-code: theme('colors.white');
    --tw-prose-pre-code: theme('colors.secondary.300');
    --tw-prose-pre-bg: theme('colors.secondary.950');
    --tw-prose-th-borders: theme('colors.secondary.800');
    --tw-prose-td-borders: theme('colors.secondary.800');
  }

  .prose a {
    text-decoration: none;
    border-bottom: 1px solid theme('colors.accent.500');
    transition: border-color 0.2s, color 0.2s;
  }

  .prose a:hover {
    border-bottom-color: theme('colors.accent.400');
    color: theme('colors.accent.400');
  }

  .prose pre {
    background-color: theme('colors.secondary.950');
    border: 1px solid theme('colors.secondary.800');
    border-radius: 0.375rem;
  }

  .prose code {
    background-color: theme('colors.secondary.800');
    padding: 0.2em 0.4em;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }

  .prose blockquote {
    border-left-color: theme('colors.primary.500');
    background-color: theme('colors.secondary.900');
    padding: 1rem;
    border-radius: 0.375rem;
  }

  /* Table of Contents Styles */
  .toc-depth-2 {
    padding-left: 0;
  }

  .toc-depth-3 {
    padding-left: 1rem;
  }

  .toc-depth-4 {
    padding-left: 2rem;
  }

  .toc-link.toc-active {
    color: theme('colors.accent.400');
    font-weight: 600;
    position: relative;
  }

  .toc-link.toc-active::before {
    content: '';
    position: absolute;
    left: -1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 3px;
    height: 1rem;
    background-color: theme('colors.accent.400');
    border-radius: 2px;
  }

  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Ensure headings have proper spacing for scroll positioning */
  .prose h2,
  .prose h3 {
    scroll-margin-top: 120px;
  }
</style>
</WikiLayout>