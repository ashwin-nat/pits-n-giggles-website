---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import dayjs from 'dayjs';

// Generate static paths for all blog posts
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the blog post data
const { entry } = Astro.props;
const { Content, headings } = await entry.render();

// Format the date
const formattedDate = dayjs(entry.data.pubDate).format('MMMM D, YYYY');

// Filter headings for table of contents (only h2 and h3)
const tocHeadings = headings.filter(heading => heading.depth >= 2 && heading.depth <= 3);
---

<Layout title={entry.data.title} description={entry.data.description}>
  <article class="pt-32 pb-20">
    <div class="container mx-auto px-4">
      <!-- Post Header -->
      <div class="max-w-3xl mx-auto mb-12">
        <div class="flex gap-2 mb-4">
          {entry.data.tags.map((tag: string) => (
            <span class="inline-block bg-secondary-800 text-secondary-300 text-xs px-3 py-1 rounded">
              {tag}
            </span>
          ))}
        </div>
        <h1 class="text-4xl font-bold mb-4">{entry.data.title}</h1>
        <div class="flex items-center text-secondary-400 mb-6">
          <span>{formattedDate}</span>
          <span class="mx-2">â€¢</span>
          <span>By {entry.data.author}</span>
        </div>

        <!-- Featured Image -->
        <div class="rounded-lg overflow-hidden mb-8">
          <img
            src={entry.data.image.url}
            alt={entry.data.image.alt}
            class="w-full h-auto"
          />
        </div>
      </div>

      <!-- Mobile TOC Button -->
      {tocHeadings.length > 0 && (
        <div class="lg:hidden max-w-3xl mx-auto mb-8">
          <button
            id="mobile-toc-toggle"
            class="flex items-center gap-2 bg-secondary-900/50 backdrop-blur-sm border border-secondary-800 rounded-lg px-4 py-3 text-secondary-300 hover:text-white hover:border-secondary-700 transition-all duration-200"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M3 6h18"></path>
              <path d="M3 12h18"></path>
              <path d="M3 18h18"></path>
            </svg>
            <span class="font-medium">Table of Contents</span>
            <svg id="toc-chevron" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform duration-200">
              <polyline points="6 9 12 15 18 9"></polyline>
            </svg>
          </button>
          
          <!-- Mobile TOC Dropdown -->
          <div id="mobile-toc" class="hidden mt-2 bg-secondary-900/95 backdrop-blur-sm border border-secondary-800 rounded-lg p-4 shadow-lg">
            <nav class="toc-nav">
              <ul class="space-y-2">
                {tocHeadings.map((heading) => (
                  <li class={`toc-item toc-depth-${heading.depth}`}>
                    <a
                      href={`#${heading.slug}`}
                      class="mobile-toc-link block text-secondary-300 hover:text-accent-400 transition-colors duration-200 text-sm leading-relaxed py-1"
                    >
                      {heading.text}
                    </a>
                  </li>
                ))}
              </ul>
            </nav>
          </div>
        </div>
      )}

      <!-- Main Content Layout -->
      <div class="max-w-6xl mx-auto flex gap-8">
        <!-- Table of Contents - Desktop Only -->
        {tocHeadings.length > 0 && (
          <aside class="hidden lg:block w-64 flex-shrink-0">
            <div class="sticky top-32">
              <div class="bg-secondary-900/50 backdrop-blur-sm border border-secondary-800 rounded-lg p-6">
                <h3 class="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M3 6h18"></path>
                    <path d="M3 12h18"></path>
                    <path d="M3 18h18"></path>
                  </svg>
                  Table of Contents
                </h3>
                <nav class="toc-nav">
                  <ul class="space-y-2">
                    {tocHeadings.map((heading) => (
                      <li class={`toc-item toc-depth-${heading.depth}`}>
                        <a
                          href={`#${heading.slug}`}
                          class="desktop-toc-link block text-secondary-300 hover:text-accent-400 transition-colors duration-200 text-sm leading-relaxed"
                        >
                          {heading.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </nav>
              </div>
            </div>
          </aside>
        )}

        <!-- Post Content -->
        <div class="flex-1 min-w-0">
          <div class="prose prose-invert prose-lg font-body leading-[1.5] max-w-none">
            <Content />
          </div>
        </div>
      </div>

      <!-- Post Navigation -->
      <div class="max-w-3xl mx-auto mt-12 pt-8 border-t border-secondary-800">
        <div class="flex flex-col sm:flex-row justify-between">
          <a href="/blog" class="text-accent-500 hover:text-accent-400 font-semibold inline-flex items-center gap-1 mb-4 sm:mb-0">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M19 12H5"></path>
              <path d="M12 19l-7-7 7-7"></path>
            </svg>
            Back to Blog
          </a>

          <div class="flex gap-4">
            <a href="#" class="text-secondary-400 hover:text-white transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M18.77 7.46H14.5v-1.9c0-.9.6-1.1 1-1.1h3V.5h-4.33C10.24.5 9.5 3.44 9.5 5.32v2.15h-3v4h3v12h5v-12h3.85l.42-4z"/>
              </svg>
            </a>
            <a href="#" class="text-secondary-400 hover:text-white transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"/>
              </svg>
            </a>
            <a href="#" class="text-secondary-400 hover:text-white transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19.633 7.997c.013.175.013.349.013.523 0 5.325-4.053 11.461-11.46 11.461-2.282 0-4.402-.661-6.186-1.809.324.037.636.05.973.50a8.07 8.07 0 0 0 5.001-1.721 4.036 4.036 0 0 1-3.767-2.793c.249.037.499.062.761.062.361 0 .724-.05 1.061-.137a4.027 4.027 0 0 1-3.23-3.953v-.05c.537.299 1.16.486 1.82.511a4.022 4.022 0 0 1-1.796-3.354c0-.748.199-1.434.548-2.032a11.457 11.457 0 0 0 8.306 4.215c-.062-.3-.1-.599-.1-.898a4.026 4.026 0 0 1 4.028-4.028c1.16 0 2.207.486 2.943 1.272a7.957 7.957 0 0 0 2.556-.973 4.02 4.02 0 0 1-1.771 2.22 8.073 8.073 0 0 0 2.319-.624 8.645 8.645 0 0 1-2.019 2.083z"/>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  </article>

  <!-- Table of Contents JavaScript -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Mobile TOC toggle functionality
      const mobileToggle = document.getElementById('mobile-toc-toggle');
      const mobileToc = document.getElementById('mobile-toc');
      const tocChevron = document.getElementById('toc-chevron');

      if (mobileToggle && mobileToc && tocChevron) {
        mobileToggle.addEventListener('click', function() {
          const isHidden = mobileToc.classList.contains('hidden');
          
          if (isHidden) {
            mobileToc.classList.remove('hidden');
            tocChevron.style.transform = 'rotate(180deg)';
          } else {
            mobileToc.classList.add('hidden');
            tocChevron.style.transform = 'rotate(0deg)';
          }
        });

        // Close mobile TOC when clicking on a link
        const mobileLinks = document.querySelectorAll('.mobile-toc-link');
        mobileLinks.forEach(link => {
          link.addEventListener('click', function() {
            mobileToc.classList.add('hidden');
            tocChevron.style.transform = 'rotate(0deg)';
          });
        });
      }

      // Smooth scrolling for all TOC links
      const tocLinks = document.querySelectorAll('.toc-nav a[href^="#"]');
      
      tocLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const targetId = this.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            const headerOffset = 120; // Account for fixed header
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
          }
        });
      });

      // Highlight current section in desktop TOC only
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const id = entry.target.getAttribute('id');
          const desktopTocLink = document.querySelector(`.desktop-toc-link[href="#${id}"]`);
          
          if (entry.isIntersecting) {
            // Remove active class from all desktop TOC links
            document.querySelectorAll('.desktop-toc-link').forEach(link => {
              link.classList.remove('toc-active');
            });
            
            // Add active class to current section
            if (desktopTocLink) {
              desktopTocLink.classList.add('toc-active');
            }
          }
        });
      }, {
        rootMargin: '-120px 0px -80% 0px' // Trigger when heading is near top of viewport
      });

      // Observe all headings
      document.querySelectorAll('h2[id], h3[id]').forEach(heading => {
        observer.observe(heading);
      });
    });
  </script>
</Layout>

<style>
  .prose {
    --tw-prose-body: theme('colors.secondary.300');
    --tw-prose-headings: theme('colors.white');
    --tw-prose-lead: theme('colors.secondary.300');
    --tw-prose-links: theme('colors.accent.500');
    --tw-prose-bold: theme('colors.white');
    --tw-prose-counters: theme('colors.secondary.400');
    --tw-prose-bullets: theme('colors.secondary.400');
    --tw-prose-hr: theme('colors.secondary.800');
    --tw-prose-quotes: theme('colors.secondary.200');
    --tw-prose-quote-borders: theme('colors.primary.500');
    --tw-prose-captions: theme('colors.secondary.400');
    --tw-prose-code: theme('colors.white');
    --tw-prose-pre-code: theme('colors.secondary.300');
    --tw-prose-pre-bg: theme('colors.secondary.950');
    --tw-prose-th-borders: theme('colors.secondary.800');
    --tw-prose-td-borders: theme('colors.secondary.800');
  }

  .prose a {
    text-decoration: none;
    border-bottom: 1px solid theme('colors.accent.500');
    transition: border-color 0.2s, color 0.2s;
  }

  .prose a:hover {
    border-bottom-color: theme('colors.accent.400');
    color: theme('colors.accent.400');
  }

  .prose pre {
    background-color: theme('colors.secondary.950');
    border: 1px solid theme('colors.secondary.800');
    border-radius: 0.375rem;
  }

  .prose img {
    border-radius: 0.375rem;
  }

  .prose code {
    background-color: theme('colors.secondary.800');
    padding: 0.2em 0.4em;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }

  .prose blockquote {
    border-left-color: theme('colors.primary.500');
    background-color: theme('colors.secondary.900');
    padding: 1rem;
    border-radius: 0.375rem;
  }

  /* Override default prose list spacing with tighter spacing */
  .prose :where(ul > li):not(:where([class~="not-prose"] *)),
  .prose :where(ol > li):not(:where([class~="not-prose"] *)) {
    margin-top: 0.125rem !important;
    margin-bottom: 0.125rem !important;
  }

  /* Maintain normal spacing between lists and other elements */
  .prose :where(ul):not(:where([class~="not-prose"] *)),
  .prose :where(ol):not(:where([class~="not-prose"] *)) {
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
  }

  /* Nested lists should have minimal top margin */
  .prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"] *)) {
    margin-top: 0.25rem !important;
    margin-bottom: 0.25rem !important;
  }

  /* Table of Contents Styles */
  .toc-depth-2 {
    padding-left: 0;
  }

  .toc-depth-3 {
    padding-left: 1rem;
  }

  .toc-depth-4 {
    padding-left: 2rem;
  }

  .desktop-toc-link.toc-active {
    color: theme('colors.accent.400');
    font-weight: 600;
    position: relative;
  }

  .desktop-toc-link.toc-active::before {
    content: '';
    position: absolute;
    left: -1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 3px;
    height: 1rem;
    background-color: theme('colors.accent.400');
    border-radius: 2px;
  }

  /* Mobile TOC specific styles */
  #mobile-toc {
    animation: slideDown 0.2s ease-out;
  }

  #mobile-toc.hidden {
    animation: slideUp 0.2s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideUp {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  }

  /* Ensure headings have proper spacing for scroll positioning */
  .prose h2,
  .prose h3 {
    scroll-margin-top: 120px;
  }
</style>